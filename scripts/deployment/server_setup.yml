---
# Ansible Playbook for TikTrue Server Setup and Configuration
# This playbook sets up a Ubuntu server for TikTrue platform deployment

- name: TikTrue Server Setup and Configuration
  hosts: all
  become: yes
  vars:
    python_version: "3.11"
    node_version: "18"
    app_user: "tiktrue"
    app_directory: "/opt/tiktrue"
    
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        
    - name: Install system dependencies
      apt:
        name:
          - curl
          - wget
          - git
          - build-essential
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - ufw
          - fail2ban
          - htop
          - vim
          - unzip
        state: present
        
    - name: Add Python PPA repository
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present
        
    - name: Install Python and related packages
      apt:
        name:
          - "python{{ python_version }}"
          - "python{{ python_version }}-dev"
          - "python{{ python_version }}-venv"
          - python3-pip
          - python3-setuptools
        state: present
        
    - name: Install Node.js repository
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | sudo -E bash -
      args:
        creates: /etc/apt/sources.list.d/nodesource.list
        
    - name: Install Node.js and npm
      apt:
        name:
          - nodejs
        state: present
        
    - name: Install PostgreSQL client
      apt:
        name:
          - postgresql-client
          - libpq-dev
        state: present
        
    - name: Install Nginx
      apt:
        name: nginx
        state: present
        
    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_directory }}"
        create_home: yes
        
    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_directory }}"
        - "{{ app_directory }}/backend"
        - "{{ app_directory }}/frontend"
        - "{{ app_directory }}/logs"
        - "{{ app_directory }}/backups"
        - "{{ app_directory }}/ssl"
        
    - name: Configure UFW firewall
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "22"    # SSH
        - "80"    # HTTP
        - "443"   # HTTPS
        - "8000"  # Django development
        
    - name: Enable UFW firewall
      ufw:
        state: enabled
        policy: deny
        direction: incoming
        
    - name: Configure fail2ban for SSH protection
      copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 3
          
          [sshd]
          enabled = true
          port = ssh
          logpath = /var/log/auth.log
          maxretry = 3
          
    - name: Start and enable fail2ban
      systemd:
        name: fail2ban
        state: started
        enabled: yes
        
    - name: Install Certbot for SSL certificates
      apt:
        name:
          - certbot
          - python3-certbot-nginx
        state: present
        
    - name: Install PM2 for process management
      npm:
        name: pm2
        global: yes
        
    - name: Install Liara CLI
      npm:
        name: "@liara/cli"
        global: yes
        
    - name: Configure Nginx basic settings
      copy:
        dest: /etc/nginx/nginx.conf
        content: |
          user www-data;
          worker_processes auto;
          pid /run/nginx.pid;
          
          events {
              worker_connections 1024;
              use epoll;
              multi_accept on;
          }
          
          http {
              include /etc/nginx/mime.types;
              default_type application/octet-stream;
              
              # Logging
              log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                             '$status $body_bytes_sent "$http_referer" '
                             '"$http_user_agent" "$http_x_forwarded_for"';
              
              access_log /var/log/nginx/access.log main;
              error_log /var/log/nginx/error.log;
              
              # Performance
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;
              
              # Security headers
              add_header X-Frame-Options DENY;
              add_header X-Content-Type-Options nosniff;
              add_header X-XSS-Protection "1; mode=block";
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              
              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
              
              # Include site configurations
              include /etc/nginx/conf.d/*.conf;
              include /etc/nginx/sites-enabled/*;
          }
        backup: yes
        
    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
        
    - name: Copy TikTrue Nginx configuration template
      copy:
        src: nginx_tiktrue.conf
        dest: /etc/nginx/sites-available/tiktrue
        backup: yes
        
    - name: Update Nginx configuration with server details
      replace:
        path: /etc/nginx/sites-available/tiktrue
        regexp: 'tiktrue\.com'
        replace: '{{ domain_name | default("tiktrue.com") }}'
        
    - name: Update API domain in Nginx configuration
      replace:
        path: /etc/nginx/sites-available/tiktrue
        regexp: 'api\.tiktrue\.com'
        replace: 'api.{{ domain_name | default("tiktrue.com") }}'
        
    - name: Enable TikTrue Nginx site
      file:
        src: /etc/nginx/sites-available/tiktrue
        dest: /etc/nginx/sites-enabled/tiktrue
        state: link
        
    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      
    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes
      when: nginx_test.rc == 0
      
    - name: Create systemd service for TikTrue backend
      copy:
        dest: /etc/systemd/system/tiktrue-backend.service
        content: |
          [Unit]
          Description=TikTrue Backend Django Application
          After=network.target
          
          [Service]
          Type=simple
          User={{ app_user }}
          Group={{ app_user }}
          WorkingDirectory={{ app_directory }}/backend
          Environment=PATH={{ app_directory }}/backend/venv/bin
          ExecStart={{ app_directory }}/backend/venv/bin/gunicorn --bind 127.0.0.1:8000 tiktrue_backend.wsgi:application
          ExecReload=/bin/kill -s HUP $MAINPID
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          
    - name: Create systemd service for TikTrue frontend
      copy:
        dest: /etc/systemd/system/tiktrue-frontend.service
        content: |
          [Unit]
          Description=TikTrue Frontend React Application
          After=network.target
          
          [Service]
          Type=simple
          User={{ app_user }}
          Group={{ app_user }}
          WorkingDirectory={{ app_directory }}/frontend
          ExecStart=/usr/bin/npm start
          Restart=always
          RestartSec=10
          Environment=NODE_ENV=production
          Environment=PORT=3000
          
          [Install]
          WantedBy=multi-user.target
          
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
        
    - name: Create backup script
      copy:
        dest: "{{ app_directory }}/backup.sh"
        content: |
          #!/bin/bash
          # TikTrue Backup Script
          
          BACKUP_DIR="{{ app_directory }}/backups"
          DATE=$(date +%Y%m%d_%H%M%S)
          
          # Create backup directory
          mkdir -p "$BACKUP_DIR/$DATE"
          
          # Backup application files
          tar -czf "$BACKUP_DIR/$DATE/backend.tar.gz" -C "{{ app_directory }}" backend/
          tar -czf "$BACKUP_DIR/$DATE/frontend.tar.gz" -C "{{ app_directory }}" frontend/
          
          # Backup logs
          tar -czf "$BACKUP_DIR/$DATE/logs.tar.gz" -C "{{ app_directory }}" logs/
          
          # Keep only last 7 days of backups
          find "$BACKUP_DIR" -type d -mtime +7 -exec rm -rf {} +
          
          echo "Backup completed: $BACKUP_DIR/$DATE"
        mode: '0755'
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        
    - name: Create log rotation configuration
      copy:
        dest: /etc/logrotate.d/tiktrue
        content: |
          {{ app_directory }}/logs/*.log {
              daily
              missingok
              rotate 30
              compress
              delaycompress
              notifempty
              create 644 {{ app_user }} {{ app_user }}
              postrotate
                  systemctl reload tiktrue-backend
                  systemctl reload tiktrue-frontend
              endscript
          }
          
    - name: Set up cron job for backups
      cron:
        name: "TikTrue daily backup"
        minute: "0"
        hour: "2"
        job: "{{ app_directory }}/backup.sh"
        user: "{{ app_user }}"
        
    - name: Install monitoring tools
      apt:
        name:
          - htop
          - iotop
          - nethogs
          - ncdu
        state: present
        
    - name: Create health check script
      copy:
        dest: "{{ app_directory }}/health_check.sh"
        content: |
          #!/bin/bash
          # TikTrue Health Check Script
          
          echo "=== TikTrue Health Check ==="
          echo "Date: $(date)"
          echo
          
          # Check services
          echo "=== Service Status ==="
          systemctl is-active tiktrue-backend
          systemctl is-active tiktrue-frontend
          systemctl is-active nginx
          echo
          
          # Check ports
          echo "=== Port Status ==="
          netstat -tlnp | grep -E ':80|:443|:8000|:3000'
          echo
          
          # Check disk space
          echo "=== Disk Usage ==="
          df -h
          echo
          
          # Check memory
          echo "=== Memory Usage ==="
          free -h
          echo
          
          # Check processes
          echo "=== TikTrue Processes ==="
          ps aux | grep -E 'python|node|nginx' | grep -v grep
          
        mode: '0755'
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        
    - name: Display setup completion message
      debug:
        msg: |
          ===================================
          TikTrue Server Setup Complete!
          ===================================
          
          Server IP: {{ ansible_default_ipv4.address }}
          Application Directory: {{ app_directory }}
          Application User: {{ app_user }}
          
          Services:
          - tiktrue-backend (Django on port 8000)
          - tiktrue-frontend (React on port 3000)
          - nginx (reverse proxy on ports 80/443)
          
          Next Steps:
          1. Deploy your applications to {{ app_directory }}
          2. Configure SSL certificates with certbot
          3. Start the TikTrue services
          4. Configure your domain DNS
          
          Health Check: {{ app_directory }}/health_check.sh
          Backup Script: {{ app_directory }}/backup.sh
          
          ===================================